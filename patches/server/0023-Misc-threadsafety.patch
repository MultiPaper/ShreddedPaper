From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Sat, 25 May 2024 13:58:42 +0900
Subject: [PATCH] Misc threadsafety


diff --git a/src/main/java/net/minecraft/server/level/PlayerMap.java b/src/main/java/net/minecraft/server/level/PlayerMap.java
index 12f1345ff70388fb217100bfc717ef861785381d..9c0f561a65ed5f5b45ce4c30754f71b310e614b0 100644
--- a/src/main/java/net/minecraft/server/level/PlayerMap.java
+++ b/src/main/java/net/minecraft/server/level/PlayerMap.java
@@ -2,36 +2,47 @@ package net.minecraft.server.level;
 
 import it.unimi.dsi.fastutil.objects.Object2BooleanMap;
 import it.unimi.dsi.fastutil.objects.Object2BooleanOpenHashMap;
+import io.multipaper.shreddedpaper.util.SimpleStampedLock;
+
+import java.util.List;
 import java.util.Set;
+import java.util.concurrent.CopyOnWriteArrayList;
 
 public final class PlayerMap {
     private final Object2BooleanMap<ServerPlayer> players = new Object2BooleanOpenHashMap<>();
-
-    public Set<ServerPlayer> getAllPlayers() {
-        return this.players.keySet();
+    private final SimpleStampedLock playersLock = new SimpleStampedLock(); // ShreddedPaper
+    private final CopyOnWriteArrayList<ServerPlayer> playersList = new CopyOnWriteArrayList<>(); // ShreddedPaper
+
+    public List<ServerPlayer> getAllPlayers() { // ShreddedPaper
+        // ShreddedPaper - change to a CopyOnWriteArrayList cache of the player key set to allow for thread-safe iteration
+        //  - Players aren't added/removed often, so a CopyOnWriteArrayList is sufficient
+        // return this.players.keySet(); // ShreddedPaper
+        return this.playersList; // ShreddedPaper
     }
 
     public void addPlayer(ServerPlayer player, boolean inactive) {
-        this.players.put(player, inactive);
+        this.playersLock.write(() -> this.players.put(player, inactive)); // ShreddedPaper
+        this.playersList.add(player); // ShreddedPaper
     }
 
     public void removePlayer(ServerPlayer player) {
-        this.players.removeBoolean(player);
+        this.playersLock.write(() -> this.players.removeBoolean(player)); // ShreddedPaper
+        this.playersList.remove(player); // ShreddedPaper
     }
 
     public void ignorePlayer(ServerPlayer player) {
-        this.players.replace(player, true);
+        this.playersLock.write(() -> this.players.replace(player, true)); // ShreddedPaper
     }
 
     public void unIgnorePlayer(ServerPlayer player) {
-        this.players.replace(player, false);
+        this.playersLock.write(() -> this.players.replace(player, false)); // ShreddedPaper
     }
 
     public boolean ignoredOrUnknown(ServerPlayer player) {
-        return this.players.getOrDefault(player, true);
+        return this.playersLock.optimisticRead(() -> this.players.getOrDefault(player, true)); // ShreddedPaper
     }
 
     public boolean ignored(ServerPlayer player) {
-        return this.players.getBoolean(player);
+        return this.playersLock.optimisticRead(() -> this.players.getBoolean(player)); // ShreddedPaper
     }
 }
diff --git a/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiManager.java b/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiManager.java
index c6f193339fdcbcc938d4eafdcad0b112cf1698d5..256fbdc2a287a8232c8ecb9d0e06290a141a49ee 100644
--- a/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiManager.java
+++ b/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiManager.java
@@ -49,7 +49,7 @@ public class PoiManager extends SectionStorage<PoiSection> {
         return POI_DATA_SOURCE - level;
     }
 
-    protected void updateDistanceTracking(long section) {
+    protected synchronized void updateDistanceTracking(long section) {
         if (this.isVillageCenter(section)) {
             this.villageDistanceTracker.setSource(section, POI_DATA_SOURCE);
         } else {
@@ -228,7 +228,7 @@ public class PoiManager extends SectionStorage<PoiSection> {
         return this.getOrLoad(SectionPos.asLong(pos)).map(poiSet -> poiSet.getFreeTickets(pos)).orElse(0);
     }
 
-    public int sectionsToVillage(SectionPos pos) {
+    public synchronized int sectionsToVillage(SectionPos pos) {
         this.villageDistanceTracker.propagateUpdates(); // Paper - replace distance tracking util
         return convertBetweenLevels(this.villageDistanceTracker.getLevel(io.papermc.paper.util.CoordinateUtils.getChunkSectionKey(pos))); // Paper - replace distance tracking util
     }
@@ -243,7 +243,7 @@ public class PoiManager extends SectionStorage<PoiSection> {
     }
 
     @Override
-    public void tick(BooleanSupplier shouldKeepTicking) {
+    public synchronized void tick(BooleanSupplier shouldKeepTicking) {
         this.villageDistanceTracker.propagateUpdates(); // Paper - rewrite chunk system
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/entity/SculkCatalystBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/SculkCatalystBlockEntity.java
index 81dd0aa6a90fd9dda9e7752f85b9cf4568e3b575..49d288e22911acd20c8935bfbed415a6f7374c4e 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/SculkCatalystBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/SculkCatalystBlockEntity.java
@@ -45,9 +45,9 @@ public class SculkCatalystBlockEntity extends BlockEntity implements GameEventLi
     // Paper end - Fix NPE in SculkBloomEvent world access
 
     public static void serverTick(Level world, BlockPos pos, BlockState state, SculkCatalystBlockEntity blockEntity) {
-        org.bukkit.craftbukkit.event.CraftEventFactory.sourceBlockOverride = blockEntity.getBlockPos(); // CraftBukkit - SPIGOT-7068: Add source block override, not the most elegant way but better than passing down a BlockPosition up to five methods deep.
+        org.bukkit.craftbukkit.event.CraftEventFactory.sourceBlockOverride.set(blockEntity.getBlockPos()); // CraftBukkit - SPIGOT-7068: Add source block override, not the most elegant way but better than passing down a BlockPosition up to five methods deep. // ShreddedPaper - use thread local
         blockEntity.catalystListener.getSculkSpreader().updateCursors(world, pos, world.getRandom(), true);
-        org.bukkit.craftbukkit.event.CraftEventFactory.sourceBlockOverride = null; // CraftBukkit
+        org.bukkit.craftbukkit.event.CraftEventFactory.sourceBlockOverride.remove(); // CraftBukkit // ShreddedPaper - use thread local
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java b/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
index 031fc626d2075cbe0941fecc188406712ab9953f..b9b084b7e9d5c9b4613d45eed9612ad5f7a4af77 100644
--- a/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
+++ b/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
@@ -3,6 +3,7 @@ package net.minecraft.world.level.block.state;
 import com.mojang.serialization.Codec;
 import com.mojang.serialization.MapCodec;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
+import io.papermc.paper.util.TickThread;
 import it.unimi.dsi.fastutil.objects.Reference2ObjectArrayMap;
 import java.util.Arrays;
 import java.util.Collections;
@@ -162,11 +163,11 @@ public abstract class BlockBehaviour implements FeatureElement {
     // Paper end - UseOnContext param
 
     protected void onPlace(BlockState state, Level world, BlockPos pos, BlockState oldState, boolean notify) {
-        org.spigotmc.AsyncCatcher.catchOp("block onPlace"); // Spigot
+        TickThread.ensureTickThread((ServerLevel) world, pos, "block onPlace"); // Spigot // ShreddedPaper
     }
 
     protected void onRemove(BlockState state, Level world, BlockPos pos, BlockState newState, boolean moved) {
-        org.spigotmc.AsyncCatcher.catchOp("block remove"); // Spigot
+        TickThread.ensureTickThread((ServerLevel) world, pos, "block remove"); // Spigot // ShreddedPaper
         if (state.hasBlockEntity() && !state.is(newState.getBlock())) {
             world.removeBlockEntity(pos);
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
index 1284c941a4c863c287098a0a04efcc723e727bb3..51090b56d26645bfb0ff943c3efb849912d74ff6 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
@@ -9,6 +9,8 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.Set;
 import java.util.UUID;
+
+import io.papermc.paper.util.TickThread;
 import net.minecraft.network.protocol.game.ClientboundHurtAnimationPacket;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.sounds.SoundEvent;
@@ -523,7 +525,7 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
 
     @Override
     public boolean addPotionEffect(PotionEffect effect, boolean force) {
-        org.spigotmc.AsyncCatcher.catchOp("effect add"); // Paper
+        TickThread.ensureTickThread(this.getHandle(), "effect add"); // Paper // ShreddedPaper
         this.getHandle().addEffect(org.bukkit.craftbukkit.potion.CraftPotionUtil.fromBukkit(effect), EntityPotionEffectEvent.Cause.PLUGIN); // Paper - Don't ignore icon
         return true;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index d16b61e2c92e35e184270eb293c7717d15051e11..bc86def0f426f1b033599f83126130f5026a7aae 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -6,6 +6,7 @@ import com.google.common.io.BaseEncoding;
 import com.mojang.authlib.GameProfile;
 import com.mojang.datafixers.util.Pair;
 import io.netty.buffer.Unpooled;
+import io.papermc.paper.util.TickThread;
 import it.unimi.dsi.fastutil.shorts.ShortArraySet;
 import it.unimi.dsi.fastutil.shorts.ShortSet;
 import java.io.ByteArrayOutputStream;
@@ -3489,7 +3490,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     // Paper start - Add chunk view API
     @Override
     public Set<java.lang.Long> getSentChunkKeys() {
-        org.spigotmc.AsyncCatcher.catchOp("accessing sent chunks");
+        TickThread.ensureTickThread(this.getHandle(), "accessing sent chunks"); // ShreddedPaper
         return it.unimi.dsi.fastutil.longs.LongSets.unmodifiable(
             this.getHandle().chunkLoader.getSentChunksRaw().clone()
         );
@@ -3497,7 +3498,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public Set<org.bukkit.Chunk> getSentChunks() {
-        org.spigotmc.AsyncCatcher.catchOp("accessing sent chunks");
+        TickThread.ensureTickThread(this.getHandle(), "accessing sent chunks"); // ShreddedPaper
         final it.unimi.dsi.fastutil.longs.LongOpenHashSet rawChunkKeys = this.getHandle().chunkLoader.getSentChunksRaw();
         final it.unimi.dsi.fastutil.objects.ObjectOpenHashSet<org.bukkit.Chunk> chunks = new it.unimi.dsi.fastutil.objects.ObjectOpenHashSet<>(rawChunkKeys.size());
         final org.bukkit.World world = this.getWorld();
@@ -3510,7 +3511,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public boolean isChunkSent(final long chunkKey) {
-        org.spigotmc.AsyncCatcher.catchOp("accessing sent chunks");
+        TickThread.ensureTickThread(this.getHandle(), "accessing sent chunks"); // ShreddedPaper
         return this.getHandle().chunkLoader.getSentChunksRaw().contains(chunkKey);
     }
     // Paper end
diff --git a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
index 5308dc55bcc334ad6bef927de6c2d9b9364d99ff..7e91d1ea6e144826e3d88e61a25fd533f2c9407d 100644
--- a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
@@ -951,7 +951,7 @@ public class CraftEventFactory {
         return CraftEventFactory.handleBlockSpreadEvent(world, source, target, block, 2);
     }
 
-    public static BlockPos sourceBlockOverride = null; // SPIGOT-7068: Add source block override, not the most elegant way but better than passing down a BlockPosition up to five methods deep.
+    public static ThreadLocal<BlockPos> sourceBlockOverride = ThreadLocal.withInitial(() -> null); // SPIGOT-7068: Add source block override, not the most elegant way but better than passing down a BlockPosition up to five methods deep. // ShreddedPaper - use thread local
 
     public static boolean handleBlockSpreadEvent(LevelAccessor world, BlockPos source, BlockPos target, net.minecraft.world.level.block.state.BlockState block, int flag) {
         // Suppress during worldgen
@@ -963,7 +963,7 @@ public class CraftEventFactory {
         CraftBlockState state = CraftBlockStates.getBlockState(world, target, flag);
         state.setData(block);
 
-        BlockSpreadEvent event = new BlockSpreadEvent(state.getBlock(), CraftBlock.at(world, CraftEventFactory.sourceBlockOverride != null ? CraftEventFactory.sourceBlockOverride : source), state);
+        BlockSpreadEvent event = new BlockSpreadEvent(state.getBlock(), CraftBlock.at(world, CraftEventFactory.sourceBlockOverride.get() != null ? CraftEventFactory.sourceBlockOverride.get() : source), state); // ShreddedPaper - use thread local
         Bukkit.getPluginManager().callEvent(event);
 
         if (!event.isCancelled()) {
