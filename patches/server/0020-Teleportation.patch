From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Sat, 25 May 2024 12:05:30 +0900
Subject: [PATCH] Teleportation


diff --git a/src/main/java/net/minecraft/server/commands/TeleportCommand.java b/src/main/java/net/minecraft/server/commands/TeleportCommand.java
index 54851f6cc0d5fddb32a9a1e84a4f5ae41af18758..75370e6fe7894d4d33997ed872d022fb5b55ce9f 100644
--- a/src/main/java/net/minecraft/server/commands/TeleportCommand.java
+++ b/src/main/java/net/minecraft/server/commands/TeleportCommand.java
@@ -12,7 +12,11 @@ import java.util.EnumSet;
 import java.util.Iterator;
 import java.util.Locale;
 import java.util.Set;
+import java.util.concurrent.CompletableFuture;
 import javax.annotation.Nullable;
+
+import io.multipaper.shreddedpaper.ShreddedPaper;
+import io.papermc.paper.util.TickThread;
 import net.minecraft.commands.CommandSourceStack;
 import net.minecraft.commands.arguments.EntityAnchorArgument;
 import net.minecraft.commands.arguments.EntityArgument;
@@ -29,6 +33,7 @@ import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.PathfinderMob;
 import net.minecraft.world.entity.RelativeMovement;
+import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.phys.Vec2;
 import net.minecraft.world.phys.Vec3;
@@ -37,6 +42,8 @@ import org.bukkit.Location;
 import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.event.entity.EntityTeleportEvent;
 import org.bukkit.event.player.PlayerTeleportEvent;
+import io.multipaper.shreddedpaper.region.RegionPos;
+import io.multipaper.shreddedpaper.threading.ShreddedPaperRegionScheduler;
 // CraftBukkit end
 
 public class TeleportCommand {
@@ -162,9 +169,14 @@ public class TeleportCommand {
             float f3 = Mth.wrapDegrees(pitch);
 
             // CraftBukkit start - Teleport event
-            boolean result;
+            // ShreddedPaper start - Run teleports on the correct thread
+            CompletableFuture<Boolean> result = new CompletableFuture<>();
             if (target instanceof ServerPlayer player) {
-                result = player.teleportTo(world, x, y, z, movementFlags, f2, f3, PlayerTeleportEvent.TeleportCause.COMMAND);
+                ChunkPos toChunkPos = new ChunkPos(new BlockPos((int) x, (int) y, (int) z));
+                ShreddedPaper.ensureSync(target, world, toChunkPos, () -> {
+                    result.complete(player.teleportTo(world, x, y, z, movementFlags, f2, f3, PlayerTeleportEvent.TeleportCause.COMMAND));
+                });
+                // ShreddedPaper end - Run teleports on the correct thread
             } else {
                 Location to = new Location(world.getWorld(), x, y, z, f2, f3);
                 EntityTeleportEvent event = new EntityTeleportEvent(target.getBukkitEntity(), target.getBukkitEntity().getLocation(), to);
@@ -174,17 +186,24 @@ public class TeleportCommand {
                 }
                 to = event.getTo(); // Paper - actually track new location
 
-                x = to.getX();
-                y = to.getY();
-                z = to.getZ();
-                f2 = to.getYaw();
-                f3 = to.getPitch();
-                world = ((CraftWorld) to.getWorld()).getHandle();
-
-                result = target.teleportTo(world, x, y, z, movementFlags, f2, f3);
+                // ShreddedPaper start - Run teleports on the correct thread
+                double finalX = to.getX();
+                double finalY = to.getY();
+                double finalZ = to.getZ();
+                float finalF2 = to.getYaw();
+                float finalF3 = to.getPitch();
+                ServerLevel finalWorld = ((CraftWorld) to.getWorld()).getHandle();
+
+                ChunkPos toChunkPos = new ChunkPos(new BlockPos((int) finalX, (int) finalY, (int) finalZ));
+                ShreddedPaper.ensureSync(target, finalWorld, toChunkPos, () -> {
+                    result.complete(target.teleportTo(finalWorld, finalX, finalY, finalZ, movementFlags, finalF2, finalF3));
+                });
+                // ShreddedPaper end - Run teleports on the correct thread
             }
 
-            if (result) {
+            result.thenAccept(success -> { // ShreddedPaper
+                if (!success) return; // ShreddedPaper
+
                 // CraftBukkit end
                 if (facingLocation != null) {
                     facingLocation.perform(source, target);
@@ -209,8 +228,7 @@ public class TeleportCommand {
 
                     entitycreature.getNavigation().stop();
                 }
-
-            }
+            }); // ShreddedPaper
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/level/ServerEntity.java b/src/main/java/net/minecraft/server/level/ServerEntity.java
index 6542c67e753245cd131de872c28862f83e7ff2f3..073743301c2e70fcd148c33e97be2a3069d6109e 100644
--- a/src/main/java/net/minecraft/server/level/ServerEntity.java
+++ b/src/main/java/net/minecraft/server/level/ServerEntity.java
@@ -43,6 +43,7 @@ import net.minecraft.world.item.MapItem;
 import net.minecraft.world.level.saveddata.maps.MapId;
 import net.minecraft.world.level.saveddata.maps.MapItemSavedData;
 import net.minecraft.world.phys.Vec3;
+import org.bukkit.Location;
 import org.slf4j.Logger;
 
 // CraftBukkit start
@@ -111,7 +112,7 @@ public class ServerEntity {
             this.broadcastAndSend(new ClientboundSetPassengersPacket(this.entity)); // CraftBukkit
             ServerEntity.removedPassengers(list, this.lastPassengers).forEach((entity) -> {
                 if (entity instanceof ServerPlayer entityplayer) {
-                    entityplayer.connection.teleport(entityplayer.getX(), entityplayer.getY(), entityplayer.getZ(), entityplayer.getYRot(), entityplayer.getXRot());
+                    entityplayer.getBukkitEntity().teleportAsync(new Location(entityplayer.getBukkitEntity().getWorld(), entityplayer.getX(), entityplayer.getY(), entityplayer.getZ(), entityplayer.getYRot(), entityplayer.getXRot())); // ShreddedPaper - teleport async
                 }
 
             });
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index ca36526379158b027b3ccebb78c0a0f4978a2c40..509601a62a2bcbaefb7aed6856a4076e874311c7 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -828,8 +828,13 @@ public class ServerPlayer extends Player {
 
         if (entity != this) {
             if (entity.isAlive()) {
-                this.absMoveTo(entity.getX(), entity.getY(), entity.getZ(), entity.getYRot(), entity.getXRot());
-                this.serverLevel().getChunkSource().move(this);
+                // ShreddedPaper start - ensure sync
+                final Vec3 toPosition = entity.position(); // The entity's position could change once the ensureSync method is called
+                ShreddedPaper.ensureSync(this, (ServerLevel) entity.level(), entity.chunkPosition(), () -> {
+                    this.absMoveTo(toPosition.x(), toPosition.y(), toPosition.z(), entity.getYRot(), entity.getXRot());
+                    this.serverLevel().getChunkSource().move(this);
+                });
+                // ShreddedPaper end - ensure sync
                 if (this.wantsToStopRiding()) {
                     this.setCamera(this);
                 }
@@ -2176,6 +2181,8 @@ public class ServerPlayer extends Player {
     }
 
     public boolean teleportTo(ServerLevel worldserver, double d0, double d1, double d2, Set<RelativeMovement> set, float f, float f1, TeleportCause cause) {
+        TickThread.ensureTickThread(this, "Cannot teleport player async"); // ShreddedPaper
+        TickThread.ensureTickThread(worldserver, d0, d2, "Cannot teleport player to async destination"); // ShreddedPaper
         // CraftBukkit end
         ChunkPos chunkcoordintpair = new ChunkPos(BlockPos.containing(d0, d1, d2));
 
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index ca7895a57139352d2f1c522dc7b64b62dc679c4c..6189ba831a32dd61e32d52f61301ae01bf3d33e1 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -8,6 +8,7 @@ import com.mojang.brigadier.StringReader;
 import com.mojang.brigadier.suggestion.Suggestions;
 import com.mojang.logging.LogUtils;
 import io.multipaper.shreddedpaper.ShreddedPaper;
+import io.papermc.paper.util.TickThread;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap.Entry;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMaps;
 import it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap;
@@ -586,6 +587,13 @@ public class ServerGamePacketListenerImpl extends ServerCommonPacketListenerImpl
                 }
                 // Paper end - Prevent moving into unloaded chunks
 
+                // ShreddedPaper start - Check we own the destination location
+                if (!TickThread.isTickThreadFor(worldserver, new Vec3(toX, toY, toZ))) {
+                    this.connection.send(new ClientboundMoveVehiclePacket(entity));
+                    return;
+                }
+                // ShreddedPaper end - Check we own the destination location
+
                 if (d10 - d9 > Math.max(100.0D, Math.pow((double) (org.spigotmc.SpigotConfig.movedTooQuicklyMultiplier * (float) i * speed), 2)) && !this.isSingleplayerOwner()) {
                 // CraftBukkit end
                     ServerGamePacketListenerImpl.LOGGER.warn("{} (vehicle of {}) moved too quickly! {},{},{}", new Object[]{entity.getName().getString(), this.player.getName().getString(), d6, d7, d8});
@@ -2115,7 +2123,7 @@ public class ServerGamePacketListenerImpl extends ServerCommonPacketListenerImpl
                 Entity entity = packet.getEntity(worldserver);
 
                 if (entity != null) {
-                    this.player.teleportTo(worldserver, entity.getX(), entity.getY(), entity.getZ(), entity.getYRot(), entity.getXRot(), org.bukkit.event.player.PlayerTeleportEvent.TeleportCause.SPECTATE); // CraftBukkit
+                    this.player.getBukkitEntity().teleportAsync(new Location(worldserver.getWorld(), entity.getX(), entity.getY(), entity.getZ(), entity.getYRot(), entity.getXRot()), org.bukkit.event.player.PlayerTeleportEvent.TeleportCause.SPECTATE); // CraftBukkit // ShreddedPaper - use teleportAsync
                     return;
                 }
             }
@@ -2982,19 +2990,27 @@ public class ServerGamePacketListenerImpl extends ServerCommonPacketListenerImpl
         switch (packetplayinclientcommand_enumclientcommand) {
             case PERFORM_RESPAWN:
                 if (this.player.wonGame) {
-                    this.player.wonGame = false;
-                    this.player = this.server.getPlayerList().respawn(this.player, this.server.getLevel(this.player.getRespawnDimension()), true, null, true, RespawnReason.END_PORTAL, org.bukkit.event.player.PlayerRespawnEvent.RespawnFlag.END_PORTAL); // Paper - Expand PlayerRespawnEvent
-                    CriteriaTriggers.CHANGED_DIMENSION.trigger(this.player, Level.END, Level.OVERWORLD);
+                    // ShreddedPaper start - async respawn
+                    this.server.getPlayerList().respawnAsync(this.player, this.server.getLevel(this.player.getRespawnDimension()), true, null, true, RespawnReason.END_PORTAL, org.bukkit.event.player.PlayerRespawnEvent.RespawnFlag.END_PORTAL).thenAccept(player -> { // Paper - Expand PlayerRespawnEvent
+                        this.player.wonGame = false;
+                        this.player = player;
+                        CriteriaTriggers.CHANGED_DIMENSION.trigger(this.player, Level.END, Level.OVERWORLD);
+                    });
+                    // ShreddedPaper end - async respawn
                 } else {
                     if (this.player.getHealth() > 0.0F) {
                         return;
                     }
 
-                    this.player = this.server.getPlayerList().respawn(this.player, false, RespawnReason.DEATH);
-                    if (this.server.isHardcore()) {
-                        this.player.setGameMode(GameType.SPECTATOR, org.bukkit.event.player.PlayerGameModeChangeEvent.Cause.HARDCORE_DEATH, null); // Paper - Expand PlayerGameModeChangeEvent
-                        ((GameRules.BooleanValue) this.player.level().getGameRules().getRule(GameRules.RULE_SPECTATORSGENERATECHUNKS)).set(false, this.player.serverLevel()); // CraftBukkit - per-world
-                    }
+                    // ShreddedPaper start - async respawn
+                    this.server.getPlayerList().respawnAsync(this.player, false, RespawnReason.DEATH).thenAccept(player -> {
+                        this.player = player;
+                        if (this.server.isHardcore()) {
+                            this.player.setGameMode(GameType.SPECTATOR, org.bukkit.event.player.PlayerGameModeChangeEvent.Cause.HARDCORE_DEATH, null); // Paper - Expand PlayerGameModeChangeEvent
+                            ((GameRules.BooleanValue) this.player.level().getGameRules().getRule(GameRules.RULE_SPECTATORSGENERATECHUNKS)).set(false, this.player.serverLevel()); // CraftBukkit - per-world
+                        }
+                    });
+                    // ShreddedPaper end - async respawn
                 }
                 break;
             case REQUEST_STATS:
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index 900891527ca401858d9c2678ae154928e5f64b08..ab96dcb873758f9d92eecb62b473b84dc9e295a2 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -22,9 +22,13 @@ import java.util.Objects;
 import java.util.Optional;
 import java.util.Set;
 import java.util.UUID;
+import java.util.concurrent.CompletableFuture;
 import java.util.function.Function;
 import java.util.function.Predicate;
+import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
+
+import io.papermc.paper.util.TickThread;
 import net.minecraft.ChatFormatting;
 import net.minecraft.FileUtil;
 import net.minecraft.commands.CommandSourceStack;
@@ -88,6 +92,7 @@ import net.minecraft.util.Mth;
 import net.minecraft.world.effect.MobEffectInstance;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.Blocks;
@@ -123,6 +128,8 @@ import org.bukkit.event.player.PlayerRespawnEvent;
 import org.bukkit.event.player.PlayerRespawnEvent.RespawnReason;
 import org.bukkit.event.player.PlayerSpawnChangeEvent;
 import io.multipaper.shreddedpaper.ShreddedPaper;
+import io.multipaper.shreddedpaper.region.RegionPos;
+import io.multipaper.shreddedpaper.threading.ShreddedPaperRegionScheduler;
 // CraftBukkit end
 
 public abstract class PlayerList {
@@ -837,12 +844,48 @@ public abstract class PlayerList {
     }
 
     public ServerPlayer respawn(ServerPlayer entityplayer, ServerLevel worldserver, boolean flag, Location location, boolean avoidSuffocation, RespawnReason reason, org.bukkit.event.player.PlayerRespawnEvent.RespawnFlag...respawnFlags) {
+        // ShreddedPaper start - async respawn
+        throw new UnsupportedOperationException("Cannot respawn player synchronously");
+    }
+
+    public CompletableFuture<ServerPlayer> respawnAsync(ServerPlayer entityplayer, boolean flag, RespawnReason reason) {
+        return this.respawnAsync(entityplayer, this.server.getLevel(entityplayer.getRespawnDimension()), flag, null, true, reason);
+    }
+
+    public CompletableFuture<ServerPlayer> respawnAsync(ServerPlayer entityplayer, ServerLevel worldserver, boolean flag, Location location, boolean avoidSuffocation, RespawnReason reason, org.bukkit.event.player.PlayerRespawnEvent.RespawnFlag...respawnFlags) {
+        CompletableFuture<ServerPlayer> future = new CompletableFuture<>();
+        // ShreddedPaper end - async respawn
         // Paper end - Expand PlayerRespawnEvent
         entityplayer.stopRiding(); // CraftBukkit
-        this.players.remove(entityplayer);
-        this.playersByName.remove(entityplayer.getScoreboardName().toLowerCase(java.util.Locale.ROOT)); // Spigot
-        entityplayer.serverLevel().removePlayerImmediately(entityplayer, Entity.RemovalReason.DISCARDED);
+        // this.players.remove(entityplayer); // ShreddedPaper - don't do this, we're reusing the same entity
+        // this.playersByName.remove(entityplayer.getScoreboardName().toLowerCase(java.util.Locale.ROOT)); // Spigot // ShreddedPaper - don't do this, we're reusing the same entity
+        // entityplayer.serverLevel().removePlayerImmediately(entityplayer, Entity.RemovalReason.DISCARDED); // ShreddedPaper - do later
         BlockPos blockposition = entityplayer.getRespawnPosition();
+
+        // ShreddedPaper start - run on respawn position thread
+        Runnable task = () -> respawnAsyncGetRespawnPosition(future, entityplayer, blockposition, worldserver, flag, location, avoidSuffocation, reason, respawnFlags);
+
+        ServerLevel fromLevel = entityplayer.serverLevel();
+        ChunkPos fromPos = entityplayer.chunkPosition();
+        ServerLevel toLevel = location == null ? this.server.getLevel(entityplayer.getRespawnDimension()) : worldserver;
+        BlockPos toPos = location == null ? blockposition : CraftLocation.toBlockPosition(location);
+
+        if (toLevel == null || toPos == null) {
+            toLevel = this.server.getLevel(Level.OVERWORLD);
+            toPos = toLevel.getSharedSpawnPos();
+        }
+
+        if (TickThread.isTickThreadFor(fromLevel, fromPos) && TickThread.isTickThreadFor(toLevel, toPos)) {
+            task.run();
+        } else {
+            ShreddedPaperRegionScheduler.scheduleAcrossLevels(fromLevel, RegionPos.forChunk(fromPos), toLevel, RegionPos.forChunk(new ChunkPos(toPos)), task);
+        }
+
+        return future;
+    }
+    private void respawnAsyncGetRespawnPosition(CompletableFuture<ServerPlayer> future, ServerPlayer entityplayer, BlockPos blockposition, ServerLevel worldserver, boolean flag, Location location, boolean avoidSuffocation, RespawnReason reason, org.bukkit.event.player.PlayerRespawnEvent.RespawnFlag...respawnFlags) {
+        // ShreddedPaper end - run on respawn position thread
+
         float f = entityplayer.getRespawnAngle();
         boolean flag1 = entityplayer.isRespawnForced();
         /* CraftBukkit start
@@ -863,17 +906,19 @@ public abstract class PlayerList {
         entityplayer.wonGame = false;
         // CraftBukkit end
 
-        entityplayer1.connection = entityplayer.connection;
-        entityplayer1.restoreFrom(entityplayer, flag);
-        entityplayer1.setId(entityplayer.getId());
-        entityplayer1.setMainArm(entityplayer.getMainArm());
-        Iterator iterator = entityplayer.getTags().iterator();
+        // ShreddedPaper start - it's the same entity, just skip the copy process rather than figuring out how to rearrange it
+        // entityplayer1.connection = entityplayer.connection;
+        // entityplayer1.restoreFrom(entityplayer, flag);
+        // entityplayer1.setId(entityplayer.getId());
+        // entityplayer1.setMainArm(entityplayer.getMainArm());
+        // Iterator iterator = entityplayer.getTags().iterator();
 
-        while (iterator.hasNext()) {
-            String s = (String) iterator.next();
+        // while (iterator.hasNext()) {
+        //     String s = (String) iterator.next();
 
-            entityplayer1.addTag(s);
-        }
+        //     entityplayer1.addTag(s);
+        // }
+        // ShreddedPaper end - it's the same entity, just skip the copy process rather than figuring out how to rearrange it
 
         boolean flag2 = false;
 
@@ -933,7 +978,7 @@ public abstract class PlayerList {
             this.cserver.getPluginManager().callEvent(respawnEvent);
             // Spigot Start
             if (entityplayer.connection.isDisconnected()) {
-                return entityplayer;
+                future.complete(entityplayer); return; // return entityplayer; // ShreddedPaper
             }
             // Spigot End
 
@@ -948,6 +993,32 @@ public abstract class PlayerList {
         } else {
             location.setWorld(worldserver.getWorld());
         }
+
+        // ShreddedPaper start - run on new respawn position thread, in case a plugin modified it
+        BlockPos finalBlockposition = blockposition;
+        Location finalLocation = location;
+        boolean finalIsLocAltered = isLocAltered;
+        boolean finalFlag = flag2;
+        boolean finalIsRespawn = isRespawn;
+        boolean finalIsBedSpawn = isBedSpawn;
+        Runnable task = () -> respawnAsyncFinal(future, entityplayer, finalBlockposition, flag, finalLocation, avoidSuffocation, finalIsLocAltered, flag1, finalFlag, fromWorld, finalIsRespawn, finalIsBedSpawn);
+
+        ServerLevel fromLevel = entityplayer.serverLevel();
+        ChunkPos fromPos = entityplayer.chunkPosition();
+        ServerLevel toLevel = ((CraftWorld) location.getWorld()).getHandle();
+        BlockPos toPos = new BlockPos(location.getBlockX(), location.getBlockY(), location.getBlockZ());
+
+        if (TickThread.isTickThreadFor(fromLevel, fromPos) && TickThread.isTickThreadFor(toLevel, toPos)) {
+            task.run();
+        } else {
+            ShreddedPaperRegionScheduler.scheduleAcrossLevels(fromLevel, RegionPos.forChunk(fromPos), toLevel, RegionPos.forChunk(new ChunkPos(toPos)), task);
+        }
+    }
+    private void respawnAsyncFinal(CompletableFuture<ServerPlayer> future, ServerPlayer entityplayer1, BlockPos blockposition, boolean flag, Location location, boolean avoidSuffocation, boolean isLocAltered, boolean flag1, boolean flag2, org.bukkit.World fromWorld, boolean isRespawn, boolean isBedSpawn) {
+        ServerPlayer entityplayer = entityplayer1;
+        entityplayer.serverLevel().removePlayerImmediately(entityplayer, Entity.RemovalReason.DISCARDED);
+        // ShreddedPaper end - run on respawn position thread
+
         ServerLevel worldserver1 = ((CraftWorld) location.getWorld()).getHandle();
         entityplayer1.spawnIn(worldserver1);
         entityplayer1.unsetRemoved();
@@ -975,9 +1046,9 @@ public abstract class PlayerList {
         this.sendPlayerPermissionLevel(entityplayer1);
         if (!entityplayer.connection.isDisconnected()) {
             worldserver1.addRespawnedPlayer(entityplayer1);
-            this.players.add(entityplayer1);
-            this.playersByName.put(entityplayer1.getScoreboardName().toLowerCase(java.util.Locale.ROOT), entityplayer1); // Spigot
-            this.playersByUUID.put(entityplayer1.getUUID(), entityplayer1);
+            // this.players.add(entityplayer1); // ShreddedPaper - don't do this, we're reusing the same entity
+            // this.playersByName.put(entityplayer1.getScoreboardName().toLowerCase(java.util.Locale.ROOT), entityplayer1); // Spigot // ShreddedPaper - don't do this, we're reusing the same entity
+            // this.playersByUUID.put(entityplayer1.getUUID(), entityplayer1); // ShreddedPaper - don't do this, we're reusing the same entity
         }
         // entityplayer1.initInventoryMenu();
         entityplayer1.setHealth(entityplayer1.getHealth());
@@ -1018,7 +1089,7 @@ public abstract class PlayerList {
         // Paper end - Add PlayerPostRespawnEvent
 
         // CraftBukkit end
-        return entityplayer1;
+        future.complete(entityplayer1); // return entityplayer1; // ShreddedPaper
     }
 
     public void sendPlayerPermissionLevel(ServerPlayer player) {
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 3304b486a0906dce96905d0fd63b4f87432ad646..6b89a13729c32d2b8ba1c11e1dd56c9e900ada43 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -6,6 +6,7 @@ import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
 import com.google.common.collect.UnmodifiableIterator;
 import com.mojang.logging.LogUtils;
+import io.papermc.paper.util.TickThread;
 import it.unimi.dsi.fastutil.objects.Object2DoubleArrayMap;
 import it.unimi.dsi.fastutil.objects.Object2DoubleMap;
 import java.util.Arrays;
@@ -109,6 +110,7 @@ import net.minecraft.world.level.dimension.DimensionType;
 import net.minecraft.world.level.dimension.LevelStem;
 import net.minecraft.world.level.entity.EntityAccess;
 import net.minecraft.world.level.entity.EntityInLevelCallback;
+import net.minecraft.world.level.entity.LevelCallback;
 import net.minecraft.world.level.gameevent.DynamicGameEventListener;
 import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.level.levelgen.Heightmap;
@@ -2150,6 +2152,7 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
     }
 
     public void moveTo(double x, double y, double z, float yaw, float pitch) {
+        if (levelCallback != EntityInLevelCallback.NULL) TickThread.ensureTickThread((ServerLevel) level(), x, z, "Can't move entity to async destination"); // ShreddedPaper - can't teleport into other regions
         // Paper start - Fix Entity Teleportation and cancel velocity if teleported
         if (!preserveMotion) {
             this.deltaMovement = Vec3.ZERO;
@@ -3807,6 +3810,7 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
                     this.setDeltaMovement(shapedetectorshape.speed);
                     return this;
                 }
+                TickThread.ensureTickThread(worldserver, position.x, position.z, "Can't teleport entity to async destination"); // ShreddedPaper - can't teleport into other regions
                 this.unRide();
                 // CraftBukkit end
 
@@ -3825,7 +3829,7 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
                     // CraftBukkit start - Don't spawn the new entity if the current entity isn't spawned
                     if (this.inWorld) {
                         worldserver.addDuringTeleport(entity);
-                        if (worldserver.getTypeKey() == LevelStem.END) { // CraftBukkit
+                        if (worldserver.getTypeKey() == LevelStem.END && location == null) { // CraftBukkit // ShreddedPaper - fix: don't make obsidian platform from CraftEntity.teleportAsync
                             ServerLevel.makeObsidianPlatform(worldserver, this); // CraftBukkit
                         }
                     }
diff --git a/src/main/java/net/minecraft/world/entity/projectile/FishingHook.java b/src/main/java/net/minecraft/world/entity/projectile/FishingHook.java
index 7dd5e0b935d98d552c916f8412569ff4aa0e9b04..9a85983fac4cb14e19832d4921311107e7365fd1 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/FishingHook.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/FishingHook.java
@@ -5,6 +5,8 @@ import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
 import javax.annotation.Nullable;
+
+import io.multipaper.shreddedpaper.ShreddedPaper;
 import net.minecraft.advancements.CriteriaTriggers;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.particles.ParticleTypes;
@@ -209,7 +211,12 @@ public class FishingHook extends Projectile {
                 if (this.currentState == FishingHook.FishHookState.HOOKED_IN_ENTITY) {
                     if (this.hookedIn != null) {
                         if (!this.hookedIn.isRemoved() && this.hookedIn.level().dimension() == this.level().dimension()) {
-                            this.setPos(this.hookedIn.getX(), this.hookedIn.getY(0.8D), this.hookedIn.getZ());
+                            // ShreddedPaper start - ensure sync
+                            final Vec3 toPosition = this.hookedIn.position(); // The entity's position could change once the ensureSync method is called
+                            ShreddedPaper.ensureSync(this, (ServerLevel) this.hookedIn.level(), this.hookedIn.chunkPosition(), () -> {
+                                this.setPos(toPosition.x(), this.hookedIn.getY(0.8D), toPosition.z());
+                            });
+                            // ShreddedPaper end - ensure sync
                         } else {
                             this.setHookedEntity((Entity) null);
                             this.currentState = FishingHook.FishHookState.FLYING;
diff --git a/src/main/java/net/minecraft/world/entity/projectile/ThrownEnderpearl.java b/src/main/java/net/minecraft/world/entity/projectile/ThrownEnderpearl.java
index 61bd2459f2b9164dce90134103abaddce42b0621..39d3e08148f2bf3cee2ee6377e28df6fb21d1cef 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/ThrownEnderpearl.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/ThrownEnderpearl.java
@@ -19,9 +19,12 @@ import net.minecraft.world.phys.EntityHitResult;
 import net.minecraft.world.phys.HitResult;
 // CraftBukkit start
 import org.bukkit.Bukkit;
+import org.bukkit.Location;
 import org.bukkit.event.entity.CreatureSpawnEvent;
 import org.bukkit.event.entity.EntityRemoveEvent;
 import org.bukkit.event.player.PlayerTeleportEvent;
+
+import java.util.concurrent.CompletableFuture;
 // CraftBukkit end
 
 public class ThrownEnderpearl extends ThrowableItemProjectile {
@@ -66,16 +69,21 @@ public class ThrownEnderpearl extends ThrowableItemProjectile {
                     location.setPitch(player.getLocation().getPitch());
                     location.setYaw(player.getLocation().getYaw());
 
-                    PlayerTeleportEvent teleEvent = new PlayerTeleportEvent(player, player.getLocation(), location, PlayerTeleportEvent.TeleportCause.ENDER_PEARL);
-                    Bukkit.getPluginManager().callEvent(teleEvent);
+                    // ShreddedPaper start - teleport async
+                    // PlayerTeleportEvent teleEvent = new PlayerTeleportEvent(player, player.getLocation(), location, PlayerTeleportEvent.TeleportCause.ENDER_PEARL);
+                    // Bukkit.getPluginManager().callEvent(teleEvent);
+                    Location previousLocation = entityplayer.getBukkitEntity().getLocation();
+                    CompletableFuture<Boolean> teleFuture = entityplayer.getBukkitEntity().teleportAsync(location, PlayerTeleportEvent.TeleportCause.ENDER_PEARL);
 
-                    if (!teleEvent.isCancelled() && entityplayer.connection.isAcceptingMessages()) {
+                    teleFuture.thenAccept(wasTeleported -> {
+                    if (wasTeleported && entityplayer.connection.isAcceptingMessages()) {
+                    // ShreddedPaper end - teleport async
                         if (this.random.nextFloat() < this.level().purpurConfig.enderPearlEndermiteChance && this.level().getGameRules().getBoolean(GameRules.RULE_DOMOBSPAWNING)) { // Purpur
                             Endermite entityendermite = (Endermite) EntityType.ENDERMITE.create(this.level());
 
                             if (entityendermite != null) {
                                 entityendermite.setPlayerSpawned(true); // Purpur
-                                entityendermite.moveTo(entity.getX(), entity.getY(), entity.getZ(), entity.getYRot(), entity.getXRot());
+                                entityendermite.moveTo(previousLocation.getX(), previousLocation.getY(), previousLocation.getZ(), previousLocation.getYaw(), previousLocation.getPitch()); // ShreddedPaper - teleport async
                                 this.level().addFreshEntity(entityendermite, CreatureSpawnEvent.SpawnReason.ENDER_PEARL);
                             }
                         }
@@ -84,15 +92,16 @@ public class ThrownEnderpearl extends ThrowableItemProjectile {
                             entity.stopRiding();
                         }
 
-                        entityplayer.connection.teleport(teleEvent.getTo());
+                        // entityplayer.connection.teleport(teleEvent.getTo()); // ShreddedPaper - teleport async
                         entity.resetFallDistance();
                         entity.hurt(this.damageSources().fall().customEventDamager(this), this.level().purpurConfig.enderPearlDamage); // CraftBukkit // Paper - fix DamageSource API // Purpur
                     }
                     // CraftBukkit end
                     this.level().playSound((Player) null, this.getX(), this.getY(), this.getZ(), SoundEvents.PLAYER_TELEPORT, SoundSource.PLAYERS);
+                    }); // ShreddedPaper - teleport async
                 }
             } else if (entity != null) {
-                entity.teleportTo(this.getX(), this.getY(), this.getZ());
+                entity.getBukkitEntity().teleportAsync(new Location(this.level().getWorld(), this.getX(), this.getY(), this.getZ(), entity.getBukkitYaw(), entity.getXRot())); // entity.teleportTo(this.getX(), this.getY(), this.getZ()); // ShreddedPaper - teleport async
                 entity.resetFallDistance();
             }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index ad53a7b2e4e58837ca13b05828442125c9280469..bd60758e8291821c66bd82a5d23682959b915136 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -2568,7 +2568,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     // Paper start
     public java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsync(int x, int z, boolean gen, boolean urgent) {
         warnUnsafeChunk("getting a faraway chunk async", x, z); // Paper
-        if (Bukkit.isPrimaryThread()) {
+        if (TickThread.isTickThreadFor(getHandle(), x, z)) { // ShreddedPaper - ensure it's the chunk's thread
             net.minecraft.world.level.chunk.LevelChunk immediate = this.world.getChunkSource().getChunkAtIfLoadedImmediately(x, z);
             if (immediate != null) {
                 return java.util.concurrent.CompletableFuture.completedFuture(new CraftChunk(immediate));
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index 0ed18542fd8e2a992dc56a5f421eaa840e0af193..67d7eede1543599497cd31b7de308e1caf952a08 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -8,6 +8,8 @@ import com.google.common.collect.Lists;
 import java.util.List;
 import java.util.Set;
 import java.util.UUID;
+
+import io.multipaper.shreddedpaper.ShreddedPaper;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.Tag;
 import net.minecraft.network.chat.Component;
@@ -19,6 +21,7 @@ import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.boss.EnderDragonPart;
 import net.minecraft.world.entity.boss.enderdragon.EnderDragon;
 import net.minecraft.world.entity.projectile.AbstractArrow;
+import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.phys.AABB;
 import org.bukkit.EntityEffect;
 import org.bukkit.Location;
@@ -57,6 +60,8 @@ import org.bukkit.util.NumberConversions;
 import org.bukkit.util.Vector;
 
 import net.md_5.bungee.api.chat.BaseComponent; // Spigot
+import io.multipaper.shreddedpaper.region.RegionPos;
+import io.multipaper.shreddedpaper.threading.ShreddedPaperRegionScheduler;
 
 public abstract class CraftEntity implements org.bukkit.entity.Entity {
     private static PermissibleBase perm;
@@ -1064,13 +1069,36 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         net.minecraft.server.level.ServerLevel world = ((CraftWorld)locationClone.getWorld()).getHandle();
         java.util.concurrent.CompletableFuture<Boolean> ret = new java.util.concurrent.CompletableFuture<>();
 
+        // ShreddedPaper start - run sync if possible
+        ChunkPos fromChunkPos = this.getHandle().chunkPosition();
+        ChunkPos toChunkPos = CraftLocation.toChunkPosition(locationClone);
+        if (ShreddedPaper.isSync((ServerLevel) this.getHandle().level(), fromChunkPos)
+                && ShreddedPaper.isSync(world, toChunkPos)
+                && this.getHandle().level().hasChunk(fromChunkPos.x, fromChunkPos.z)
+                && world.hasChunk(toChunkPos.x, toChunkPos.z)) {
+            try {
+                ret.complete(CraftEntity.this.teleport(locationClone, cause, teleportFlags) ? Boolean.TRUE : Boolean.FALSE);
+            } catch (Throwable throwable) {
+                if (throwable instanceof ThreadDeath) {
+                    throw (ThreadDeath)throwable;
+                }
+                net.minecraft.server.MinecraftServer.LOGGER.error("Failed to teleport entity " + CraftEntity.this, throwable);
+                ret.completeExceptionally(throwable);
+            }
+            return ret;
+        }
+        // ShreddedPaper end
+
         world.loadChunksForMoveAsync(getHandle().getBoundingBoxAt(locationClone.getX(), locationClone.getY(), locationClone.getZ()),
             this instanceof CraftPlayer ? ca.spottedleaf.concurrentutil.executor.standard.PrioritisedExecutor.Priority.HIGHER : ca.spottedleaf.concurrentutil.executor.standard.PrioritisedExecutor.Priority.NORMAL, (list) -> {
                 net.minecraft.server.level.ServerChunkCache chunkProviderServer = world.getChunkSource();
                 for (net.minecraft.world.level.chunk.ChunkAccess chunk : list) {
                     chunkProviderServer.addTicketAtLevel(net.minecraft.server.level.TicketType.POST_TELEPORT, chunk.getPos(), 33, CraftEntity.this.getEntityId());
                 }
-                net.minecraft.server.MinecraftServer.getServer().scheduleOnMain(() -> {
+                ShreddedPaperRegionScheduler.scheduleAcrossLevels(
+                        (ServerLevel) CraftEntity.this.getHandle().level(), RegionPos.forChunk(CraftEntity.this.getHandle().chunkPosition()),
+                        world, RegionPos.forLocation(locationClone),
+                        () -> { // ShreddedPaper - Run teleports on the correct threads
                     try {
                         ret.complete(CraftEntity.this.teleport(locationClone, cause, teleportFlags) ? Boolean.TRUE : Boolean.FALSE);
                     } catch (Throwable throwable) {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index aac21ff5418f76b0d06b6a49a4021bde194cf1da..c12484e13ff2b06b9bad7c5b2bbf9e82c1cbc989 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -6,6 +6,7 @@ import com.google.common.io.BaseEncoding;
 import com.mojang.authlib.GameProfile;
 import com.mojang.datafixers.util.Pair;
 import io.netty.buffer.Unpooled;
+import io.papermc.paper.util.TickThread;
 import it.unimi.dsi.fastutil.shorts.ShortArraySet;
 import it.unimi.dsi.fastutil.shorts.ShortSet;
 import java.io.ByteArrayOutputStream;
@@ -1496,7 +1497,8 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
             // Paper end - Teleport API
         } else {
             // The respawn reason should never be used if the passed location is non null.
-            this.server.getHandle().respawn(entity, toWorld, true, to, !toWorld.paperConfig().environment.disableTeleportationSuffocationCheck, null); // Paper
+            if (!TickThread.isTickThreadFor(entity.serverLevel(), entity.position()) || !TickThread.isTickThreadFor(toWorld, CraftLocation.toBlockPosition(to))) throw new UnsupportedOperationException("Cannot respawn player synchronously"); // ShreddedPaper - make sure following will be run on this thread
+            this.server.getHandle().respawnAsync(entity, toWorld, true, to, !toWorld.paperConfig().environment.disableTeleportationSuffocationCheck, null).join(); // Paper // ShreddedPaper - will be run on this thread
         }
         return true;
     }
@@ -3365,7 +3367,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         {
             if ( CraftPlayer.this.getHealth() <= 0 && CraftPlayer.this.isOnline() )
             {
-                CraftPlayer.this.server.getServer().getPlayerList().respawn( CraftPlayer.this.getHandle(), false, org.bukkit.event.player.PlayerRespawnEvent.RespawnReason.PLUGIN );
+                CraftPlayer.this.server.getServer().getPlayerList().respawnAsync( CraftPlayer.this.getHandle(), false, org.bukkit.event.player.PlayerRespawnEvent.RespawnReason.PLUGIN ); // ShreddedPaper - async respawning
             }
         }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftLocation.java b/src/main/java/org/bukkit/craftbukkit/util/CraftLocation.java
index 097996d3955ab5126b71f7bff1dd2c62becb5ffd..ebc362617934e90dece6fd35becdc1558996dc0d 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftLocation.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftLocation.java
@@ -1,6 +1,8 @@
 package org.bukkit.craftbukkit.util;
 
 import net.minecraft.core.BlockPos;
+import net.minecraft.core.SectionPos;
+import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.phys.Vec3;
 import org.bukkit.Location;
 import org.bukkit.World;
@@ -40,6 +42,12 @@ public final class CraftLocation {
         return new BlockPos(location.getBlockX(), location.getBlockY(), location.getBlockZ());
     }
 
+    // ShreddedPaper start
+    public static ChunkPos toChunkPosition(Location location) {
+        return new ChunkPos(SectionPos.blockToSectionCoord(location.getBlockX()), SectionPos.blockToSectionCoord(location.getBlockZ()));
+    }
+    // ShreddedPaper end
+
     public static Vec3 toVec3D(Location location) {
         return new Vec3(location.getX(), location.getY(), location.getZ());
     }
