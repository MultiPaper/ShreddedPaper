From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Fri, 4 Mar 2022 20:33:33 +1000
Subject: [PATCH] ShreddedPaper config file


diff --git a/src/main/java/io/multipaper/shreddedpaper/config/ExceptionableConsumer.java b/src/main/java/io/multipaper/shreddedpaper/config/ExceptionableConsumer.java
new file mode 100644
index 0000000000000000000000000000000000000000..df97bb240655934b62cfb1647f2dc32707b48a09
--- /dev/null
+++ b/src/main/java/io/multipaper/shreddedpaper/config/ExceptionableConsumer.java
@@ -0,0 +1,8 @@
+package io.multipaper.shreddedpaper.config;
+
+@FunctionalInterface
+public interface ExceptionableConsumer<T> {
+
+    void accept(T t) throws Exception;
+
+}
diff --git a/src/main/java/io/multipaper/shreddedpaper/config/ShreddedPaperConfiguration.java b/src/main/java/io/multipaper/shreddedpaper/config/ShreddedPaperConfiguration.java
new file mode 100644
index 0000000000000000000000000000000000000000..d0dd169d5cac210373da184f19bfd2b0042a4ffd
--- /dev/null
+++ b/src/main/java/io/multipaper/shreddedpaper/config/ShreddedPaperConfiguration.java
@@ -0,0 +1,64 @@
+package io.multipaper.shreddedpaper.config;
+
+import io.papermc.paper.configuration.ConfigurationPart;
+import org.spongepowered.configurate.objectmapping.meta.Comment;
+
+import java.util.List;
+
+@SuppressWarnings({ "InnerClassMayBeStatic" })
+public class ShreddedPaperConfiguration extends ConfigurationPart {
+
+    public static final String HEADER = """
+            This is the main configuration file for ShreddedPaper.
+            There's quite alot to configure. Read the docs for more information.
+
+            Docs: https://github.com/MultiPaper/ShreddedPaper/blob/main/SHREDDEDPAPER_YAML.md\s
+            """;
+
+    private static ShreddedPaperConfiguration instance;
+
+    public static ShreddedPaperConfiguration get() {
+        return instance;
+    }
+
+    static void set(ShreddedPaperConfiguration instance) {
+        ShreddedPaperConfiguration.instance = instance;
+    }
+
+    public Multithreading multithreading;
+
+    public class Multithreading extends ConfigurationPart {
+
+        public int threadCount = -1;
+        public int regionSize = 8;
+        public boolean runUnsupportedPluginsInSync = true;
+        public boolean allowUnsupportedPluginsToModifyChunksViaGlobalScheduler = true;
+
+    }
+
+    public Optimizations optimizations;
+
+    public class Optimizations extends ConfigurationPart {
+
+        public int entityActivationCheckFrequency = 20;
+        public boolean disableVanishApi = false;
+        public boolean useLazyExecuteWhenNotFlushing = true;
+        public boolean processTrackQueueInParallel = true;
+        public boolean flushQueueInParallel = true;
+        public int maximumTrackersPerEntity = 500;
+        public long trackerFullUpdateFrequency = 20;
+        public boolean writePlayerSavesAsync = true;
+        public ChunkPacketCaching chunkPacketCaching;
+
+        public class ChunkPacketCaching extends ConfigurationPart {
+
+            public boolean enabled = true;
+            public boolean useSoftReferences = true;
+            public long expireAfter = 1200;
+
+        }
+
+    }
+
+
+}
diff --git a/src/main/java/io/multipaper/shreddedpaper/config/ShreddedPaperConfigurationLoader.java b/src/main/java/io/multipaper/shreddedpaper/config/ShreddedPaperConfigurationLoader.java
new file mode 100644
index 0000000000000000000000000000000000000000..9407d6afa9c13a55be65d4e680f3f1a45ea7da9f
--- /dev/null
+++ b/src/main/java/io/multipaper/shreddedpaper/config/ShreddedPaperConfigurationLoader.java
@@ -0,0 +1,128 @@
+package io.multipaper.shreddedpaper.config;
+
+import io.papermc.paper.configuration.ConfigurationLoaders;
+import io.papermc.paper.configuration.ConfigurationPart;
+import io.papermc.paper.configuration.constraint.Constraint;
+import io.papermc.paper.configuration.constraint.Constraints;
+import io.papermc.paper.configuration.mapping.InnerClassFieldDiscoverer;
+import org.spongepowered.configurate.BasicConfigurationNode;
+import org.spongepowered.configurate.CommentedConfigurationNode;
+import org.spongepowered.configurate.ConfigurateException;
+import org.spongepowered.configurate.ConfigurationNode;
+import org.spongepowered.configurate.ConfigurationOptions;
+import org.spongepowered.configurate.objectmapping.ObjectMapper;
+import org.spongepowered.configurate.serialize.SerializationException;
+import org.spongepowered.configurate.yaml.YamlConfigurationLoader;
+
+import java.io.File;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.util.Map;
+import java.util.function.UnaryOperator;
+
+import static io.leangen.geantyref.GenericTypeReflector.erase;
+
+public class ShreddedPaperConfigurationLoader {
+
+    public static void init(File file) {
+        try {
+            YamlConfigurationLoader.Builder loaderBuilder = ConfigurationLoaders.naturallySorted();
+            loaderBuilder.defaultOptions(options -> options.header(ShreddedPaperConfiguration.HEADER));
+
+            Path configFile = file.toPath();
+            YamlConfigurationLoader loader = loaderBuilder
+                    .defaultOptions(applyObjectMapperFactory(createObjectMapper().build()))
+                    .path(configFile)
+                    .build();
+            ConfigurationNode node;
+            if (Files.exists(configFile)) {
+                node = loader.load();
+            } else {
+                node = CommentedConfigurationNode.root(loader.defaultOptions());
+            }
+
+            String before = node.toString();
+            setFromProperties(node);
+
+            ShreddedPaperConfiguration instance = node.require(ShreddedPaperConfiguration.class);
+            transformLegacyConfig(node, instance);
+
+            for (Object key : node.childrenMap().keySet()) {
+                node.removeChild(key);
+            }
+
+            node.set(instance);
+
+            if (!node.toString().equals(before)) {
+                loader.save(node);
+            }
+
+            ShreddedPaperConfiguration.set(instance);
+        } catch (ConfigurateException e) {
+            throw new RuntimeException("Could not load shreddedpaper.yml", e);
+        }
+    }
+
+    private static void setFromProperties(ConfigurationNode node) {
+        for (Map.Entry<Object, Object> property : System.getProperties().entrySet()) {
+            if (property.getKey().toString().startsWith("shreddedpaper.")) {
+                String key = property.getKey().toString().substring("shreddedpaper.".length());
+                try {
+                    node.node((Object[]) key.split("\\.")).set(property.getValue());
+                } catch (SerializationException e) {
+                    e.printStackTrace();
+                }
+            }
+        }
+    }
+
+    private static ObjectMapper.Factory.Builder createObjectMapper() {
+        return ObjectMapper.factoryBuilder()
+                .addConstraint(Constraint.class, new Constraint.Factory())
+                .addConstraint(Constraints.Min.class, Number.class, new Constraints.Min.Factory())
+                .addDiscoverer(InnerClassFieldDiscoverer.globalConfig());
+    }
+
+    private static UnaryOperator<ConfigurationOptions> applyObjectMapperFactory(final ObjectMapper.Factory factory) {
+        return options -> options.serializers(builder -> builder
+                .register(type -> ConfigurationPart.class.isAssignableFrom(erase(type)), factory.asTypeSerializer())
+                .registerAnnotatedObjects(factory));
+    }
+
+    private static void transformLegacyConfig(ConfigurationNode node, ShreddedPaperConfiguration config) {
+        // getAndRemove(node, "oldValue.oldie", value -> config.newSection.newValue.newie = value.getString());
+    }
+
+    private static void getAndRemove(ConfigurationNode node, String key, ExceptionableConsumer<ConfigurationNode> consumer) {
+        if (System.getProperty(key) != null) {
+            try {
+                BasicConfigurationNode systemNode = BasicConfigurationNode.root();
+                systemNode.set(System.getProperty(key));
+                consumer.accept(systemNode);
+                return;
+            } catch (Exception e) {
+                e.printStackTrace();
+            }
+        }
+
+        String[] parts = key.split("\\.");
+
+        for (int i = 0; i < parts.length; i++) {
+            if (node.isMap() && node.childrenMap().containsKey(parts[i])) {
+                if (i == parts.length - 1) {
+                    try {
+                        consumer.accept(node.childrenMap().get(parts[i]));
+                        node.removeChild(parts[i]);
+                    } catch (Exception e) {
+                        e.printStackTrace();
+                    }
+                } else {
+                    node = node.childrenMap().get(parts[i]);
+                }
+            } else {
+                return;
+            }
+        }
+    }
+
+}
diff --git a/src/main/java/io/multipaper/shreddedpaper/permissions/ShreddedPaperCommandPermissions.java b/src/main/java/io/multipaper/shreddedpaper/permissions/ShreddedPaperCommandPermissions.java
new file mode 100644
index 0000000000000000000000000000000000000000..53dcfbdf38f007fc86064ac1a495288d5f25f598
--- /dev/null
+++ b/src/main/java/io/multipaper/shreddedpaper/permissions/ShreddedPaperCommandPermissions.java
@@ -0,0 +1,17 @@
+package io.multipaper.shreddedpaper.permissions;
+
+import org.bukkit.permissions.Permission;
+import org.bukkit.util.permissions.DefaultPermissions;
+import org.jetbrains.annotations.NotNull;
+
+public class ShreddedPaperCommandPermissions {
+    private static final String ROOT = "shreddedpaper.command";
+    private static final String PREFIX = ROOT + ".";
+
+    public static void registerPermissions(@NotNull Permission parent) {
+        Permission commands = DefaultPermissions.registerPermission(ROOT, "Gives the user the ability to use all ShreddedPaper commands", parent);
+
+
+        commands.recalculatePermissibles();
+    }
+}
diff --git a/src/main/java/io/multipaper/shreddedpaper/permissions/ShreddedPaperPermissions.java b/src/main/java/io/multipaper/shreddedpaper/permissions/ShreddedPaperPermissions.java
new file mode 100644
index 0000000000000000000000000000000000000000..a72566749fce7c3e0a89e16afc31caf01117034a
--- /dev/null
+++ b/src/main/java/io/multipaper/shreddedpaper/permissions/ShreddedPaperPermissions.java
@@ -0,0 +1,19 @@
+package io.multipaper.shreddedpaper.permissions;
+
+import org.bukkit.permissions.Permission;
+import org.bukkit.permissions.PermissionDefault;
+import org.bukkit.util.permissions.DefaultPermissions;
+
+public class ShreddedPaperPermissions {
+    private static final String ROOT = "shreddedpaper";
+
+    public static void registerCorePermissions() {
+        Permission parent = DefaultPermissions.registerPermission(ROOT, "Gives the user the ability to use all ShreddedPaper utilities and commands");
+
+        DefaultPermissions.registerPermission(ROOT + ".maximumtrackerbypass", "Gives the user the ability to see all entities regardless of the maximum tracker config", PermissionDefault.OP, parent);
+
+        ShreddedPaperCommandPermissions.registerPermissions(parent);
+
+        parent.recalculatePermissibles();
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Main.java b/src/main/java/net/minecraft/server/Main.java
index 0f7d6da8685716604f0749d4f5b60730a44cde73..a7ffbbfd2a9fdeae0953ec8753ce48e93ccce086 100644
--- a/src/main/java/net/minecraft/server/Main.java
+++ b/src/main/java/net/minecraft/server/Main.java
@@ -23,7 +23,6 @@ import joptsimple.util.PathConverter;
 import joptsimple.util.PathProperties;
 import net.minecraft.CrashReport;
 import net.minecraft.DefaultUncaughtExceptionHandler;
-import net.minecraft.SharedConstants;
 import net.minecraft.Util;
 import net.minecraft.commands.Commands;
 import net.minecraft.core.Registry;
@@ -69,6 +68,9 @@ import net.minecraft.SharedConstants;
 import org.bukkit.configuration.file.YamlConfiguration;
 // CraftBukkit end
 
+import io.multipaper.shreddedpaper.config.ShreddedPaperConfiguration;
+import io.multipaper.shreddedpaper.config.ShreddedPaperConfigurationLoader;
+
 public class Main {
 
     private static final Logger LOGGER = LogUtils.getLogger();
@@ -119,6 +121,8 @@ public class Main {
                 JvmProfiler.INSTANCE.start(Environment.SERVER);
             }
 
+            ShreddedPaperConfigurationLoader.init((File) optionset.valueOf("shreddedpaper-settings")); // ShreddedPaper
+
             // Purpur start - load config files early
             org.bukkit.configuration.file.YamlConfiguration purpurConfiguration = io.papermc.paper.configuration.PaperConfigurations.loadLegacyConfigFile((File) optionset.valueOf("purpur-settings"));
             org.purpurmc.purpur.PurpurConfig.clampEnchantLevels = purpurConfiguration.getBoolean("settings.enchantment.clamp-levels");
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 07a04dcbd48430102268f8f44e9bce437214a00f..01472ee224ac91ec4fbffdf82a0d92e0d1ab69c1 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -260,6 +260,7 @@ import org.yaml.snakeyaml.constructor.SafeConstructor;
 import org.yaml.snakeyaml.error.MarkedYAMLException;
 
 import net.md_5.bungee.api.chat.BaseComponent; // Spigot
+import io.multipaper.shreddedpaper.permissions.ShreddedPaperPermissions;
 
 import javax.annotation.Nullable; // Paper
 import javax.annotation.Nonnull; // Paper
@@ -599,6 +600,7 @@ public final class CraftServer implements Server {
             this.commandMap.registerServerAliases();
             DefaultPermissions.registerCorePermissions();
             CraftDefaultPermissions.registerCorePermissions();
+            ShreddedPaperPermissions.registerCorePermissions(); // ShreddedPaper
             if (!io.papermc.paper.configuration.GlobalConfiguration.get().misc.loadPermissionsYmlBeforePlugins) this.loadCustomPermissions(); // Paper
             this.helpMap.initializeCommands();
             this.syncCommands();
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index e2b79f8eacd34d2d20f8be34b402820723e37ae3..43310bffeeeebafb0ef7437cbfcd9e063dc137b0 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -184,6 +184,14 @@ public class Main {
                     .describedAs("Yml file");
                 // Purpur end
 
+                // ShreddedPaper start
+                acceptsAll(asList("shreddedpaper", "shreddedpaper-settings"), "File for shreddedpaper settings")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File("shreddedpaper.yml"))
+                        .describedAs("Yml file");
+                // ShreddedPaper end
+
                 // Paper start
                 acceptsAll(asList("server-name"), "Name of the server")
                         .withRequiredArg()
