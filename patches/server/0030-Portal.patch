From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Sat, 1 Jun 2024 10:44:19 +0900
Subject: [PATCH] Portal


diff --git a/src/main/java/io/multipaper/shreddedpaper/threading/ShreddedPaperDimensionChanger.java b/src/main/java/io/multipaper/shreddedpaper/threading/ShreddedPaperDimensionChanger.java
new file mode 100644
index 0000000000000000000000000000000000000000..3da4655448755a1af37bb4e5a5fdc7dcebc9437e
--- /dev/null
+++ b/src/main/java/io/multipaper/shreddedpaper/threading/ShreddedPaperDimensionChanger.java
@@ -0,0 +1,343 @@
+package io.multipaper.shreddedpaper.threading;
+
+import com.mojang.logging.LogUtils;
+import io.multipaper.shreddedpaper.region.RegionPos;
+import io.papermc.paper.util.TickThread;
+import net.minecraft.BlockUtil;
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.Direction;
+import net.minecraft.network.protocol.game.ClientboundChangeDifficultyPacket;
+import net.minecraft.network.protocol.game.ClientboundGameEventPacket;
+import net.minecraft.network.protocol.game.ClientboundLevelEventPacket;
+import net.minecraft.network.protocol.game.ClientboundPlayerAbilitiesPacket;
+import net.minecraft.network.protocol.game.ClientboundRespawnPacket;
+import net.minecraft.network.protocol.game.ClientboundUpdateMobEffectPacket;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.server.level.TicketType;
+import net.minecraft.server.players.PlayerList;
+import net.minecraft.world.effect.MobEffectInstance;
+import net.minecraft.world.entity.Entity;
+import net.minecraft.world.entity.Mob;
+import net.minecraft.world.level.ChunkPos;
+import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.properties.BlockStateProperties;
+import net.minecraft.world.level.border.WorldBorder;
+import net.minecraft.world.level.dimension.DimensionType;
+import net.minecraft.world.level.dimension.LevelStem;
+import net.minecraft.world.level.levelgen.Heightmap;
+import net.minecraft.world.level.portal.PortalInfo;
+import net.minecraft.world.level.portal.PortalShape;
+import net.minecraft.world.phys.Vec3;
+import org.bukkit.Bukkit;
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.craftbukkit.entity.CraftEntity;
+import org.bukkit.craftbukkit.event.CraftPortalEvent;
+import org.bukkit.craftbukkit.util.CraftLocation;
+import org.bukkit.event.player.PlayerChangedWorldEvent;
+import org.bukkit.event.player.PlayerTeleportEvent;
+import org.slf4j.Logger;
+
+import java.util.concurrent.CompletableFuture;
+
+public class ShreddedPaperDimensionChanger {
+
+    private static final Logger LOGGER = LogUtils.getClassLogger();
+
+    private final Entity entity;
+    private ServerLevel destinationWorld;
+    private final PlayerTeleportEvent.TeleportCause cause;
+
+    public ShreddedPaperDimensionChanger(Entity entity, ServerLevel destinationWorld, PlayerTeleportEvent.TeleportCause cause) {
+        this.entity = entity;
+        this.destinationWorld = destinationWorld;
+        this.cause = cause;
+
+        this.stage1();
+    }
+
+    private void ensureSyncWith(ServerLevel level, ChunkPos pos, Runnable runnable) {
+        if (!TickThread.isTickThreadFor(this.entity) || !TickThread.isTickThreadFor(level, pos)) {
+            ShreddedPaperRegionScheduler.scheduleAcrossLevels((ServerLevel) this.entity.level(), RegionPos.forChunk(this.entity.chunkPosition()), level, RegionPos.forChunk(pos), runnable);
+        } else {
+            runnable.run();
+        }
+    }
+
+    private void stage1() {
+        if (this.destinationWorld == null) {
+            return;
+        }
+
+        if (this.entity instanceof ServerPlayer serverPlayer && serverPlayer.isSleeping()) {
+            return;
+        }
+
+        if (isPlayerExitingEnd()) {
+            return;
+        }
+
+        CompletableFuture<PortalInfo> future = new CompletableFuture<>();
+        this.findDimensionEntryPoint(future);
+
+        future.thenAccept(portalInfo -> {
+            if (portalInfo == null) {
+                this.stage2(portalInfo);
+            } else {
+                this.ensureSyncWith(this.destinationWorld, new ChunkPos(BlockPos.containing(portalInfo.pos)), () -> {
+                    try {
+                        this.stage2(portalInfo);
+                    } catch (Exception e) {
+                        LOGGER.error("Failed to teleport entity through portal", e);
+                    }
+                });
+            }
+        })
+        .exceptionally(e -> {
+            LOGGER.error("Failed to find dimension entry point", e);
+            return null;
+        });
+    }
+
+    private boolean isPlayerExitingEnd() {
+        if (this.entity instanceof ServerPlayer serverPlayer && this.entity.level().getTypeKey() == LevelStem.END && this.destinationWorld.getTypeKey() == LevelStem.OVERWORLD) {
+            serverPlayer.isChangingDimension = true; // CraftBukkit - Moved down from above
+            serverPlayer.unRide();
+            serverPlayer.serverLevel().removePlayerImmediately(serverPlayer, Entity.RemovalReason.CHANGED_DIMENSION);
+            if (!serverPlayer.wonGame) {
+                if (serverPlayer.level().paperConfig().misc.disableEndCredits)
+                    serverPlayer.seenCredits = true; // Paper - Option to disable end credits
+                serverPlayer.wonGame = true;
+                serverPlayer.connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.WIN_GAME, serverPlayer.seenCredits ? 0.0F : 1.0F));
+                serverPlayer.seenCredits = true;
+            }
+            return true;
+        }
+
+        return false;
+    }
+
+    private void findDimensionEntryPoint(CompletableFuture<PortalInfo> future) {
+        try {
+            boolean fromEndToOverworld = this.entity.level().getTypeKey() == LevelStem.END && this.destinationWorld.getTypeKey() == LevelStem.OVERWORLD;
+            boolean destinationIsEnd = this.destinationWorld.getTypeKey() == LevelStem.END;
+            boolean destinationIsNether = this.destinationWorld.getTypeKey() == LevelStem.NETHER;
+
+            if (!fromEndToOverworld && !destinationIsEnd) {
+
+                if (this.entity.level().getTypeKey() != LevelStem.NETHER && !destinationIsNether) { // CraftBukkit
+                    future.complete(null);
+                }
+
+                WorldBorder worldborder = this.destinationWorld.getWorldBorder();
+                double d0 = DimensionType.getTeleportationScale(this.entity.level().dimensionType(), this.destinationWorld.dimensionType());
+                BlockPos blockposition = worldborder.clampToBounds(this.entity.getX() * d0, this.entity.getY(), this.entity.getZ() * d0);
+
+                int portalSearchRadius = this.destinationWorld.paperConfig().environment.portalSearchRadius;
+                if (this.entity.level().paperConfig().environment.portalSearchVanillaDimensionScaling && destinationIsNether) { // == THE_NETHER
+                    portalSearchRadius = (int) (portalSearchRadius / this.destinationWorld.dimensionType().coordinateScale());
+                }
+
+                callPortalEvent(blockposition, portalSearchRadius).thenAccept(event -> {
+                    if (event == null) {
+                        future.complete(null);
+                        return;
+                    }
+
+                    this.destinationWorld = ((CraftWorld) event.getTo().getWorld()).getHandle();
+
+                    ensureSyncWith(this.destinationWorld, new ChunkPos(CraftLocation.toBlockPosition(event.getTo())), () -> {
+                        try {
+                            future.complete(this.getExitPortal(event));
+                        } catch (Exception e) {
+                            future.completeExceptionally(e);
+                        }
+                    });
+                });
+            } else {
+                BlockPos blockposition1 = destinationIsEnd ? ServerLevel.END_SPAWN_POINT : this.destinationWorld.getSharedSpawnPos();
+
+                this.destinationWorld.getChunkSource().addRegionTicket(TicketType.PORTAL, new ChunkPos(blockposition1), 3, blockposition1);
+
+                getSpawnYValue(blockposition1, destinationIsEnd).thenAccept(i -> {
+                    callPortalEvent(blockposition1, 16).thenAccept(event -> {
+                        if (event == null) {
+                            future.complete(null);
+                            return;
+                        }
+
+                        this.destinationWorld = ((CraftWorld) event.getTo().getWorld()).getHandle();
+
+                        future.complete(new PortalInfo(new Vec3(event.getTo().getX(), i, event.getTo().getZ()), this.entity.getDeltaMovement(), this.entity.getYRot(), this.entity.getXRot(), this.destinationWorld, event));
+                    });
+                });
+            }
+        } catch (Exception e) {
+            future.completeExceptionally(e);
+        }
+    }
+
+    private CompletableFuture<Integer> getSpawnYValue(BlockPos blockposition1, boolean destinationIsEnd) {
+        if (destinationIsEnd) {
+            return CompletableFuture.completedFuture(blockposition1.getY());
+        } else {
+            return this.destinationWorld.getWorld().getChunkAtAsyncUrgently(CraftLocation.toBukkit(blockposition1, this.destinationWorld))
+                    .thenApply(chunk -> this.destinationWorld.getChunkAt(blockposition1).getHeight(Heightmap.Types.MOTION_BLOCKING_NO_LEAVES, blockposition1.getX(), blockposition1.getZ()) + 1);
+        }
+    }
+
+    private PortalInfo getExitPortal(CraftPortalEvent event) {
+        WorldBorder worldborder = this.destinationWorld.getWorldBorder();
+        BlockPos blockposition = worldborder.clampToBounds(event.getTo().getX(), event.getTo().getY(), event.getTo().getZ());
+        boolean destinationIsNether = this.destinationWorld.getTypeKey() == LevelStem.NETHER;
+
+        return this.entity.getExitPortal(this.destinationWorld, blockposition, destinationIsNether, worldborder, event.getSearchRadius(), event.getCanCreatePortal(), event.getCreationRadius()).map((blockutil_rectangle) -> {
+            // CraftBukkit end
+            BlockState iblockdata = this.entity.level().getBlockState(this.entity.portalEntrancePos);
+            Direction.Axis enumdirection_enumaxis;
+            Vec3 vec3d;
+
+            if (iblockdata.hasProperty(BlockStateProperties.HORIZONTAL_AXIS)) {
+                enumdirection_enumaxis = iblockdata.getValue(BlockStateProperties.HORIZONTAL_AXIS);
+                BlockUtil.FoundRectangle blockutil_rectangle1 = BlockUtil.getLargestRectangleAround(this.entity.portalEntrancePos, enumdirection_enumaxis, 21, Direction.Axis.Y, 21, (blockposition1) -> {
+                    return this.entity.level().getBlockState(blockposition1) == iblockdata;
+                });
+
+                vec3d = this.entity.getRelativePortalPosition(enumdirection_enumaxis, blockutil_rectangle1);
+            } else {
+                enumdirection_enumaxis = Direction.Axis.X;
+                vec3d = new Vec3(0.5D, 0.0D, 0.0D);
+            }
+
+            return PortalShape.createPortalInfo(this.destinationWorld, blockutil_rectangle, enumdirection_enumaxis, vec3d, this.entity, this.entity.getDeltaMovement(), this.entity.getYRot(), this.entity.getXRot(), event); // CraftBukkit
+        }).orElse(null); // CraftBukkit - decompile error
+    }
+
+    private CompletableFuture<CraftPortalEvent> callPortalEvent(BlockPos blockposition, int portalSearchRadius) {
+        return CompletableFuture.supplyAsync(() -> {
+            return this.entity.callPortalEvent(this.entity, this.destinationWorld, new Vec3(blockposition.getX(), blockposition.getY(), blockposition.getZ()), this.cause, portalSearchRadius, this.destinationWorld.paperConfig().environment.portalCreateRadius);
+        }, r -> this.ensureSyncWith(this.destinationWorld, new ChunkPos(blockposition), r));
+    }
+
+    private void stage2(PortalInfo portalInfo) {
+        if (portalInfo == null) {
+            return;
+        }
+
+        if (this.entity instanceof ServerPlayer serverPlayer) {
+            if (this.entity.level().getTypeKey() == LevelStem.OVERWORLD && this.destinationWorld.getTypeKey() == LevelStem.NETHER) {
+                serverPlayer.enteredNetherPosition = this.entity.position();
+            } else if (this.destinationWorld.getTypeKey() == LevelStem.END && portalInfo.portalEventInfo != null && portalInfo.portalEventInfo.getCanCreatePortal()) { // CraftBukkit
+                serverPlayer.createEndPlatform(this.destinationWorld, BlockPos.containing(portalInfo.pos));
+            }
+        }
+
+        Location exit = CraftLocation.toBukkit(portalInfo.pos, this.destinationWorld.getWorld(), portalInfo.yRot, portalInfo.xRot);
+        Vec3 speed;
+        if (this.entity instanceof ServerPlayer serverPlayer) {
+            Location enter = serverPlayer.getBukkitEntity().getLocation();
+            PlayerTeleportEvent tpEvent = new PlayerTeleportEvent(serverPlayer.getBukkitEntity(), enter, exit, cause);
+            Bukkit.getServer().getPluginManager().callEvent(tpEvent);
+            if (tpEvent.isCancelled() || tpEvent.getTo() == null) {
+                return;
+            }
+            exit = tpEvent.getTo();
+            speed = null;
+        } else {
+            CraftEntity bukkitEntity = this.entity.getBukkitEntity();
+            org.bukkit.event.entity.EntityPortalExitEvent event = new org.bukkit.event.entity.EntityPortalExitEvent(bukkitEntity,
+                    bukkitEntity.getLocation(), exit,
+                    bukkitEntity.getVelocity(), org.bukkit.craftbukkit.util.CraftVector.toBukkit(portalInfo.speed));
+            event.callEvent();
+            if (this.entity.isRemoved() || event.isCancelled() || event.getTo() == null) {
+                return; // ShreddedPaper
+            }
+            exit = event.getTo();
+            speed = org.bukkit.craftbukkit.util.CraftVector.toNMS(event.getAfter());
+        }
+
+        this.destinationWorld = ((CraftWorld) exit.getWorld()).getHandle();
+
+        Location finalExit = exit;
+        this.ensureSyncWith(this.destinationWorld, new ChunkPos(CraftLocation.toBlockPosition(finalExit)), () -> stage3(finalExit, speed));
+    }
+
+    private void stage3(Location exit, Vec3 speed) {
+        if (this.entity instanceof ServerPlayer serverPlayer) {
+            serverPlayer.isChangingDimension = true; // CraftBukkit - Set teleport invulnerability only if player changing worlds
+
+            serverPlayer.connection.send(new ClientboundRespawnPacket(serverPlayer.createCommonSpawnInfo(this.destinationWorld), (byte) 3));
+            serverPlayer.connection.send(new ClientboundChangeDifficultyPacket(this.destinationWorld.getDifficulty(), this.entity.level().getLevelData().isDifficultyLocked())); // Paper - per level difficulty
+            PlayerList playerlist = serverPlayer.server.getPlayerList();
+
+            playerlist.sendPlayerPermissionLevel(serverPlayer);
+            serverPlayer.serverLevel().removePlayerImmediately(serverPlayer, Entity.RemovalReason.CHANGED_DIMENSION);
+            serverPlayer.unsetRemoved();
+            serverPlayer.portalPos = io.papermc.paper.util.MCUtil.toBlockPosition(exit); // Purpur
+
+            // CraftBukkit end
+            serverPlayer.setServerLevel(this.destinationWorld);
+            serverPlayer.connection.teleport(exit); // CraftBukkit - use internal teleport without event
+            serverPlayer.connection.resetPosition();
+            this.destinationWorld.addDuringPortalTeleport(serverPlayer);
+            //worldserver1.getProfiler().pop(); // Purpur
+            serverPlayer.triggerDimensionChangeTriggers(this.destinationWorld);
+            serverPlayer.connection.send(new ClientboundPlayerAbilitiesPacket(serverPlayer.getAbilities()));
+            playerlist.sendLevelInfo(serverPlayer, this.destinationWorld);
+            playerlist.sendAllPlayerInfo(serverPlayer);
+
+            for (MobEffectInstance mobeffect : serverPlayer.getActiveEffects()) {
+                serverPlayer.connection.send(new ClientboundUpdateMobEffectPacket(serverPlayer.getId(), mobeffect, false));
+            }
+
+            serverPlayer.connection.send(new ClientboundLevelEventPacket(1032, BlockPos.ZERO, 0, false));
+            serverPlayer.lastSentExp = -1;
+            serverPlayer.lastSentHealth = -1.0F;
+            serverPlayer.lastSentFood = -1;
+
+            // CraftBukkit start
+            PlayerChangedWorldEvent changeEvent = new PlayerChangedWorldEvent(serverPlayer.getBukkitEntity(), this.destinationWorld.getWorld());
+            serverPlayer.level().getCraftServer().getPluginManager().callEvent(changeEvent);
+            // CraftBukkit end
+        } else {
+            if (this.destinationWorld == this.entity.level()) {
+                // SPIGOT-6782: Just move the entity if a plugin changed the world to the one the entity is already in
+                this.entity.moveTo(exit.getX(), exit.getY(), exit.getZ(), exit.getYaw(), exit.getPitch());
+                this.entity.setDeltaMovement(speed);
+                return;
+            }
+
+            this.entity.unRide();
+
+            if (this.entity instanceof Mob mob) {
+                mob.dropLeash(true, true); // Paper drop lead
+            }
+
+            Entity entity = this.entity.getType().create(this.destinationWorld);
+
+            if (entity != null) {
+                entity.restoreFrom(this.entity);
+                entity.moveTo(exit.getX(), exit.getY(), exit.getZ(), exit.getYaw(), exit.getPitch()); // Paper - EntityPortalExitEvent
+                entity.setDeltaMovement(speed); // Paper - EntityPortalExitEvent
+                // CraftBukkit start - Don't spawn the new entity if the current entity isn't spawned
+                if (this.entity.inWorld) {
+                    this.destinationWorld.addDuringTeleport(entity);
+                    if (this.destinationWorld.getTypeKey() == LevelStem.END) { // CraftBukkit
+                        ServerLevel.makeObsidianPlatform(this.destinationWorld, this.entity); // CraftBukkit
+                    }
+                }
+                // CraftBukkit end
+                // // CraftBukkit start - Forward the CraftEntity to the new entity // Paper - Forward CraftEntity in teleport command; moved to Entity#restoreFrom
+                // this.getBukkitEntity().setHandle(entity);
+                // entity.bukkitEntity = this.getBukkitEntity();
+                // // CraftBukkit end
+            }
+
+            this.entity.removeAfterChangingDimensions();
+            ((ServerLevel) this.entity.level()).resetEmptyTime();
+            this.destinationWorld.resetEmptyTime();
+        }
+    }
+
+}
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index 9fa73f3848f89364ac46b7bdffc5591b53a64e16..de42949f9754b73ca03873c7a97ccdaba0455a5a 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -20,6 +20,8 @@ import java.util.concurrent.CompletableFuture;
 import java.util.stream.Collectors;
 import javax.annotation.Nullable;
 
+import io.multipaper.shreddedpaper.region.RegionPos;
+import io.multipaper.shreddedpaper.threading.ShreddedPaperRegionScheduler;
 import io.papermc.paper.util.TickThread;
 import net.minecraft.BlockUtil;
 import net.minecraft.ChatFormatting;
@@ -221,8 +223,8 @@ public class ServerPlayer extends Player {
     private int lastRecordedArmor = Integer.MIN_VALUE;
     private int lastRecordedLevel = Integer.MIN_VALUE;
     private int lastRecordedExperience = Integer.MIN_VALUE;
-    private float lastSentHealth = -1.0E8F;
-    private int lastSentFood = -99999999;
+    public float lastSentHealth = -1.0E8F; // ShreddedPaper - make public
+    public int lastSentFood = -99999999; // ShreddedPaper - make public
     private boolean lastFoodSaturationZero = true;
     public int lastSentExp = -99999999;
     public int spawnInvulnerableTime = 60;
@@ -244,7 +246,7 @@ public class ServerPlayer extends Player {
     @Nullable
     private Vec3 startingToFallPosition;
     @Nullable
-    private Vec3 enteredNetherPosition;
+    public Vec3 enteredNetherPosition; // ShreddedPaper - make public
     @Nullable
     private Vec3 enteredLavaOnVehiclePosition;
     private SectionPos lastSectionPos;
@@ -1426,7 +1428,7 @@ public class ServerPlayer extends Player {
 
     // CraftBukkit start
     @Override
-    protected CraftPortalEvent callPortalEvent(Entity entity, ServerLevel exitWorldServer, Vec3 exitPosition, TeleportCause cause, int searchRadius, int creationRadius) {
+    public CraftPortalEvent callPortalEvent(Entity entity, ServerLevel exitWorldServer, Vec3 exitPosition, TeleportCause cause, int searchRadius, int creationRadius) { // ShreddedPaper - make public
         Location enter = this.getBukkitEntity().getLocation();
         Location exit = CraftLocation.toBukkit(exitPosition, exitWorldServer.getWorld(), this.getYRot(), this.getXRot());
         PlayerPortalEvent event = new PlayerPortalEvent(this.getBukkitEntity(), enter, exit, cause, searchRadius, true, creationRadius);
@@ -1438,7 +1440,7 @@ public class ServerPlayer extends Player {
     }
     // CraftBukkit end
 
-    private void createEndPlatform(ServerLevel world, BlockPos centerPos) {
+    public void createEndPlatform(ServerLevel world, BlockPos centerPos) { // ShreddedPaper - make public
         BlockPos.MutableBlockPos blockposition_mutableblockposition = centerPos.mutable();
         org.bukkit.craftbukkit.util.BlockStateListPopulator blockList = new org.bukkit.craftbukkit.util.BlockStateListPopulator(world); // CraftBukkit
 
@@ -1462,7 +1464,7 @@ public class ServerPlayer extends Player {
     }
 
     @Override
-    protected Optional<BlockUtil.FoundRectangle> getExitPortal(ServerLevel worldserver, BlockPos blockposition, boolean flag, WorldBorder worldborder, int searchRadius, boolean canCreatePortal, int createRadius) { // CraftBukkit
+    public Optional<BlockUtil.FoundRectangle> getExitPortal(ServerLevel worldserver, BlockPos blockposition, boolean flag, WorldBorder worldborder, int searchRadius, boolean canCreatePortal, int createRadius) { // CraftBukkit // ShreddedPaper - make public
         Optional<BlockUtil.FoundRectangle> optional = super.getExitPortal(worldserver, blockposition, flag, worldborder, searchRadius, canCreatePortal, createRadius); // CraftBukkit
 
         if (optional.isPresent() || !canCreatePortal) { // CraftBukkit
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 6c1e9965b10b5709129110bf408eaada8991542c..6b2c2e2f782630a3b7e25532260cc61e02c8049f 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -6,6 +6,9 @@ import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
 import com.google.common.collect.UnmodifiableIterator;
 import com.mojang.logging.LogUtils;
+import io.multipaper.shreddedpaper.region.RegionPos;
+import io.multipaper.shreddedpaper.threading.ShreddedPaperDimensionChanger;
+import io.multipaper.shreddedpaper.threading.ShreddedPaperRegionScheduler;
 import io.papermc.paper.util.TickThread;
 import it.unimi.dsi.fastutil.objects.Object2DoubleArrayMap;
 import it.unimi.dsi.fastutil.objects.Object2DoubleMap;
@@ -376,7 +379,7 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
     public int portalCooldown;
     public boolean isInsidePortal;
     protected int portalTime;
-    protected BlockPos portalEntrancePos;
+    public BlockPos portalEntrancePos; // ShreddedPaper - make public
     private boolean invulnerable;
     protected UUID uuid;
     protected String stringUUID;
@@ -472,6 +475,13 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
         org.bukkit.event.entity.EntityPortalEnterEvent event = new org.bukkit.event.entity.EntityPortalEnterEvent(this.getBukkitEntity(), new org.bukkit.Location(world.getWorld(), pos.getX(), pos.getY(), pos.getZ()));
         event.callEvent();
 
+        // ShreddedPaper start - async dimension changing
+        if (true) {
+            new ShreddedPaperDimensionChanger(this, worldserver, PlayerTeleportEvent.TeleportCause.END_PORTAL);
+            return;
+        }
+        // ShreddedPaper end - async dimension changing
+
         if (this instanceof ServerPlayer) {
             ((ServerPlayer) this).changeDimension(worldserver, PlayerTeleportEvent.TeleportCause.END_PORTAL);
             return;
@@ -3298,11 +3308,18 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
                         worldserver1 = event.getTargetWorld() == null ? null : ((CraftWorld) event.getTargetWorld()).getHandle();
                     // Paper end - Add EntityPortalReadyEvent
                     this.setPortalCooldown();
+
+                    // ShreddedPaper start - async dimension changing
+                    if (true) {
+                        new ShreddedPaperDimensionChanger(this, worldserver1, PlayerTeleportEvent.TeleportCause.NETHER_PORTAL);
+                    }
+                    // ShreddedPaper end - async dimension changing
+
                     // CraftBukkit start
                     if (this instanceof ServerPlayer) {
-                        ((ServerPlayer) this).changeDimension(worldserver1, PlayerTeleportEvent.TeleportCause.NETHER_PORTAL);
+                        // ((ServerPlayer) this).changeDimension(worldserver1, PlayerTeleportEvent.TeleportCause.NETHER_PORTAL); // ShreddedPaper - handled above
                     } else {
-                        this.changeDimension(worldserver1);
+                        // this.changeDimension(worldserver1); // ShreddedPaper - handled above
                     }
                     } // Paper - Add EntityPortalReadyEvent
                     // CraftBukkit end
@@ -3851,7 +3868,7 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
         }
     }
 
-    protected void removeAfterChangingDimensions() {
+    public void removeAfterChangingDimensions() { // ShreddedPaper - make public
         this.setRemoved(Entity.RemovalReason.CHANGED_DIMENSION, null); // CraftBukkit - add Bukkit remove cause
     }
 
@@ -3932,12 +3949,12 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
         }
     }
 
-    protected Vec3 getRelativePortalPosition(Direction.Axis portalAxis, BlockUtil.FoundRectangle portalRect) {
+    public Vec3 getRelativePortalPosition(Direction.Axis portalAxis, BlockUtil.FoundRectangle portalRect) { // ShreddedPaper - make public
         return PortalShape.getRelativePosition(portalRect, portalAxis, this.position(), this.getDimensions(this.getPose()));
     }
 
     // CraftBukkit start
-    protected CraftPortalEvent callPortalEvent(Entity entity, ServerLevel exitWorldServer, Vec3 exitPosition, PlayerTeleportEvent.TeleportCause cause, int searchRadius, int creationRadius) {
+    public CraftPortalEvent callPortalEvent(Entity entity, ServerLevel exitWorldServer, Vec3 exitPosition, PlayerTeleportEvent.TeleportCause cause, int searchRadius, int creationRadius) { // ShreddedPaper - make public
         org.bukkit.entity.Entity bukkitEntity = entity.getBukkitEntity();
         Location enter = bukkitEntity.getLocation();
         Location exit = CraftLocation.toBukkit(exitPosition, exitWorldServer.getWorld());
@@ -3957,7 +3974,7 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
         return new CraftPortalEvent(event);
     }
 
-    protected Optional<BlockUtil.FoundRectangle> getExitPortal(ServerLevel worldserver, BlockPos blockposition, boolean flag, WorldBorder worldborder, int searchRadius, boolean canCreatePortal, int createRadius) {
+    public Optional<BlockUtil.FoundRectangle> getExitPortal(ServerLevel worldserver, BlockPos blockposition, boolean flag, WorldBorder worldborder, int searchRadius, boolean canCreatePortal, int createRadius) { // ShreddedPaper - make public
         return worldserver.getPortalForcer().findPortalAround(blockposition, worldborder, searchRadius);
         // CraftBukkit end
     }
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index 472598d554c6c4134f06443b8ef06c3a726cd830..6f840e64c2f416f5e98c9c462fd29e3291a56fcf 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -3921,7 +3921,7 @@ public abstract class LivingEntity extends Entity implements Attackable {
     }
 
     @Override
-    protected Vec3 getRelativePortalPosition(Direction.Axis portalAxis, BlockUtil.FoundRectangle portalRect) {
+    public Vec3 getRelativePortalPosition(Direction.Axis portalAxis, BlockUtil.FoundRectangle portalRect) { // ShreddedPaper - make public
         return LivingEntity.resetForwardDirectionOfRelativePortalPosition(super.getRelativePortalPosition(portalAxis, portalRect));
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/Mob.java b/src/main/java/net/minecraft/world/entity/Mob.java
index c4d964aeac21f0809149e1d50182985fd1dd0938..36224e76d4ad4ed820ea49078a3171a0522df843 100644
--- a/src/main/java/net/minecraft/world/entity/Mob.java
+++ b/src/main/java/net/minecraft/world/entity/Mob.java
@@ -1912,7 +1912,7 @@ public abstract class Mob extends LivingEntity implements EquipmentUser, Targeti
     }
 
     @Override
-    protected void removeAfterChangingDimensions() {
+    public void removeAfterChangingDimensions() { // ShreddedPaper - make public
         super.removeAfterChangingDimensions();
         // Paper start - Expand EntityUnleashEvent
         EntityUnleashEvent event = new EntityUnleashEvent(this.getBukkitEntity(), EntityUnleashEvent.UnleashReason.UNKNOWN, false);
diff --git a/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java b/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java
index e7a1ce585c9e552e6f9ce9acd26fdfe5c43e0b5d..de2ea35a226c5f595a2ab53beda8238a806c2bad 100644
--- a/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java
+++ b/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java
@@ -184,7 +184,7 @@ public abstract class AbstractMinecart extends VehicleEntity {
     }
 
     @Override
-    protected Vec3 getRelativePortalPosition(Direction.Axis portalAxis, BlockUtil.FoundRectangle portalRect) {
+    public Vec3 getRelativePortalPosition(Direction.Axis portalAxis, BlockUtil.FoundRectangle portalRect) { // ShreddedPaper - make public
         return LivingEntity.resetForwardDirectionOfRelativePortalPosition(super.getRelativePortalPosition(portalAxis, portalRect));
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/vehicle/Boat.java b/src/main/java/net/minecraft/world/entity/vehicle/Boat.java
index 105e2b7d7cd7c64a9164e4114476e44f29433f49..17c81fde9c879d51f09de2efb5a00263c4512aaf 100644
--- a/src/main/java/net/minecraft/world/entity/vehicle/Boat.java
+++ b/src/main/java/net/minecraft/world/entity/vehicle/Boat.java
@@ -155,7 +155,7 @@ public class Boat extends VehicleEntity implements VariantHolder<Boat.Type> {
     }
 
     @Override
-    protected Vec3 getRelativePortalPosition(Direction.Axis portalAxis, BlockUtil.FoundRectangle portalRect) {
+    public Vec3 getRelativePortalPosition(Direction.Axis portalAxis, BlockUtil.FoundRectangle portalRect) { // ShreddedPaper - make public
         return LivingEntity.resetForwardDirectionOfRelativePortalPosition(super.getRelativePortalPosition(portalAxis, portalRect));
     }
 
